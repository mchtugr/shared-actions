name: Release

on:
  workflow_call:
    inputs:
      type:
        description: 'The type of release (e.g., patch, minor, major)'
        required: false
        type: string
        default: 'patch'
      source-branch:
        description: 'The source branch to release from'
        required: false
        type: string
        default: 'develop'
      target-branch:
        description: 'The target branch to merge the release into'
        required: false
        type: string
        default: 'main'
    secrets:
        GH_ACTION_PAT:
            description: 'GitHub Personal Access Token with repo permissions'
            required: true

env:
  BRANCHES_TO_PUSH: "${{ inputs.source-branch }} ${{ inputs.target-branch }}"
  SOURCE_BRANCH: ${{ inputs.source-branch }}
  TARGET_BRANCH: ${{ inputs.target-branch }}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  
          token: ${{ secrets.GH_ACTION_PAT }}
          ref: ${{ inputs.source-branch }}
            
      # - name: Validate release type
      #   run: |
      #     if [[ "${{ inputs.type }}" != "patch" && "${{ inputs.type }}" != "minor" && "${{ inputs.type }}" != "major" ]]; then
      #       echo "Invalid release type: ${{ inputs.type }}. Must be one of: patch, minor, major."
      #       exit 1
      #     fi

      # - name: Ensure branch is source branch
      #   run: |
      #     if [[ "${GITHUB_REF##*/}" != "${{ inputs.source-branch }}" ]]; then
      #       echo "This workflow can only be run from the ${{ inputs.source-branch }} branch."
      #       exit 1
      #     fi

      - name: Set git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '"version":' package.json | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Get next version
        id: next_version
        uses: mchtugr/get-release-version@v1
        with:
          current-version: ${{ steps.get_version.outputs.current_version }}
          release-type: ${{ inputs.type }}
      
      - name: Check out to target branch and merge source branch
        run: |
          git fetch --all
          git checkout "${TARGET_BRANCH}"
          git merge -v "${SOURCE_BRANCH}"

      - name: Bump version (release)
        id: version
        env:
          NEXT_VERSION: ${{ steps.next_version.outputs.release-version }}
        run: |
          RELEASE_VERSION=$(npm version $NEXT_VERSION --no-git-tag-version)
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT        

      - name: Commit release version to target branch
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.release_version }}
        run: |
          git add package.json package-lock.json || true
          git commit -m "chore(release): $RELEASE_VERSION"

      - name: Create Changelog
        run: |
          echo "Generating changelog..."

      - name: Tag and create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.release_version }}
          name: ${{ steps.version.outputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Switch back to source branch and merge target branch
        run: |
          git checkout "${SOURCE_BRANCH}"
          git merge -v "${TARGET_BRANCH}"
      
      - name: Get snapshot version
        id: snapshot_version
        uses: mchtugr/get-release-version@v1
        with:
          current-version: ${{ steps.version.outputs.release_version }}
          release-type: patch
          generate-snapshot: true

      - name: Switch back to source branch and set snapshot version
        env: 
          SNAPSHOT_VERSION: ${{ steps.snapshot_version.outputs.release-version }}
        run: |
          git checkout ${{ inputs.source-branch }}
          npm version $SNAPSHOT_VERSION --no-git-tag-version
          git add package.json package-lock.json || true
          git commit -m "chore(release-candidate): v$SNAPSHOT_VERSION"
      - name: Push changes to remote branches
        run: |
          git push --atomic origin ${{ env.BRANCHES_TO_PUSH }}
