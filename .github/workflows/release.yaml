name: Release

on:
  workflow_call:
    inputs:
      type:
        description: 'The type of release (e.g., patch, minor, major)'
        required: false
        type: string
        default: 'patch'
      source-branch:
        description: 'The source branch to release from'
        required: false
        type: string
        default: 'develop'
      target-branch:
        description: 'The target branch to merge the release into'
        required: false
        type: string
        default: 'main'
      dry-run:
        description: 'If true, the workflow will simulate the release process without making any changes'
        required: false
        type: boolean
        default: true  
    secrets:
        GH_ACTION_PAT:
            description: 'GitHub Personal Access Token with repo permissions'
            required: true

env:
  BRANCHES_TO_PUSH: "${{ inputs.source-branch }} ${{ inputs.target-branch }}"
  SOURCE_BRANCH: ${{ inputs.source-branch }}
  TARGET_BRANCH: ${{ inputs.target-branch }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  
          token: ${{ secrets.GH_ACTION_PAT }}
          ref: ${{ inputs.source-branch }}

      - name: Set git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(grep '"version":' package.json | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?)".*/\1/')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
      
      - name: Get next version
        id: next-version
        uses: mchtugr/get-next-release-version@v1
        with:
          current-version: ${{ steps.current-version.outputs.version }}
          release-type: ${{ inputs.type }}
      
      - name: Check out to target branch and merge source branch
        run: |
          git fetch --all
          git checkout "${TARGET_BRANCH}"
          git merge -v "${SOURCE_BRANCH}"

      - name: Bump version (release)
        id: release-version
        env:
          NEXT_VERSION: ${{ steps.next-version.outputs.release-version }}
        run: |
          RELEASE_VERSION=$(npm version $NEXT_VERSION --no-git-tag-version)
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT 
          echo "Release version: $RELEASE_VERSION"

      - name: Commit release version to target branch
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.version }}
        run: |
          git add package.json package-lock.json || true
          git commit -v -m "chore(release): $RELEASE_VERSION"

      - name: Create Changelog
        run: |
          echo "Generating changelog..."

      - name: Create Release Tag
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.version }}
        run: |
          git tag -f $RELEASE_VERSION
          echo "BRANCHES_TO_PUSH=${BRANCHES_TO_PUSH} ${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "Created tag: $RELEASE_VERSION"
      
      - name: Switch back to source branch and merge target branch
        run: |
          git checkout "${SOURCE_BRANCH}"
          git merge -v "${TARGET_BRANCH}"
      
      - name: Get snapshot version
        id: snapshot_version
        uses: mchtugr/get-next-release-version@v1
        with:
          current-version: ${{ steps.release-version.outputs.version }}
          release-type: patch
          generate-snapshot: true

      - name: Set snapshot version
        env: 
          SNAPSHOT_VERSION: ${{ steps.snapshot_version.outputs.release-version }}
        run: |
          npm version $SNAPSHOT_VERSION --no-git-tag-version
          git add package.json package-lock.json || true
          git commit -v -m "chore(release-candidate): v$SNAPSHOT_VERSION"
      - name: Push changes to remote branches
        if: ${{ inputs.dry-run == false }}
        run: |
          git push -v --atomic origin ${{ env.BRANCHES_TO_PUSH }}
      - name: Release
        if: ${{ inputs.dry-run == false }}
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.version }}
          GH_TOKEN: ${{ secrets.GH_ACTION_PAT }}
        run: |
          gh release create $RELEASE_VERSION \
            -t "$RELEASE_VERSION" \
            -n "chore(release): $RELEASE_VERSION" \
            --repo $GITHUB_REPOSITORY
      - name: Dry Run Complete
        if: ${{ inputs.dry-run == true }}
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.version }}
        run: |
          echo "Dry run complete. No changes were pushed or released."
          echo "$RELEASE_VERSION would be released if this were not a dry run."
          
