name: Push image to ECR

on:
  workflow_call: 
    inputs:
      image-tag:
        description: 'Tag for the image'
        required: true
        default: 'latest'
        type: string
      ecr-registry:
        description: 'ECR registry ID'
        required: true
        type: string    
      ecr-repo:
        description: 'ECR repository name'
        required: true
        type: string
      aws-region:
        description: 'AWS region'
        required: true
        type: string
      dry-run:
        description: 'If true, the workflow will simulate the push process without making any changes'
        required: false
        type: boolean
        default: true  

    secrets:
      AWS_ROLE_ARN:
        description: 'The ARN of the role to assume'
        required: true  

jobs:
  push-to-ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ inputs.ecr-registry || steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ecr-repo }}
          IMAGE_TAG: ${{ inputs.image-tag }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "Docker image built: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            echo "Dry run enabled, skipping docker push"
          else
            echo "Pushing docker image to ECR: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          fi
