name: EKS Deploy
on:
  workflow_call:
    inputs:
      commit-id:
        description: 'The commit ID to deploy'
        required: false
        default: ${{ github.sha }}
        type: string
      image-tag:
        description: 'The Docker image tag to deploy'
        required: true
        type: string  
      aws-region:
        description: 'The AWS region where the EKS cluster is located'
        required: true
        type: string
      namespace:
        description: 'The Kubernetes namespace to deploy to'
        required: false
        type: string
        default: 'default'
      deployment-name:
        description: 'The name of the Helm deployment'
        required: true
        type: string
      chart-file-path:
        description: 'The location of the Helm chart'
        required: false
        type: string
        default: './helm'
      values-file-path:
        description: 'The Helm values file to use for deployment'
        required: false
        type: string
        default: './helm/values-dev.yaml'
      use-default-ingress-host:
        description: 'Whether to set ingress host in Helm values'
        required: false
        type: boolean
        default: false
      dry-run:
        description: 'If true, the workflow will simulate the deployment process without making any changes'
        required: false
        type: boolean
        default: true  
    secrets:
      EKS_ROLE_ARN:
        description: 'The AWS Role ARN to assume for deployment'
        required: true
      EKS_CLUSTER_NAME:
        description: 'The name of the EKS cluster'
        required: true  
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.commit-id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.EKS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.33.0'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ inputs.aws-region }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Get default ingress hostname
        if: ${{ inputs.use-default-ingress-host == true }}
        id: ingress
        run: |
          INGRESS_HOST=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || true)
          echo "ingress_host=$INGRESS_HOST" >> $GITHUB_OUTPUT
        
      - name: Set ingress host argument with default hostname
        id: ingress-host-arg
        if: ${{ inputs.use-default-ingress-host == true }}
        env:
          INGRESS_HOST: ${{ steps.ingress.outputs.ingress_host }}
        run: |
          if [ -n "$INGRESS_HOST" ] ; then
            echo "Using default ingress host: $INGRESS_HOST"
            echo "ingress_arg=--set ingress.host=$INGRESS_HOST" >> $GITHUB_ENV
          else
            echo "No default ingress host found, proceeding without setting ingress host"
          fi    

      - name: Deploy to EKS
        if: ${{ inputs.dry-run == false }}
        run: |
          helm upgrade --install ${{ inputs.deployment-name }} ${{ inputs.chart-file-path }} \
            --namespace ${{ inputs.namespace }} \
            --create-namespace \
            --values ${{ inputs.values-file-path}} \
            --set image.tag=${{ inputs.image-tag }} ${{ steps.ingress-host-arg.outputs.ingress_arg }}

      - name: Simulate Deployment (Dry Run)
        if: ${{ inputs.dry-run == true }}
        run: |
          echo "Dry run enabled, skipping actual deployment"
          echo "Helm command that would be executed:"
          echo "helm upgrade --install ${{ inputs.deployment-name }} ${{ inputs.chart-file-path }} \
            --namespace ${{ inputs.namespace }} \
            --create-namespace \
            --values ${{ inputs.values-file-path}} \
            --set image.tag=${{ inputs.image-tag }} ${{ steps.ingress-host-arg.outputs.ingress_arg }}"